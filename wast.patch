diff --git a/crates/wast/Cargo.toml b/crates/wast/Cargo.toml
index 3ce9a0b..e630a50 100644
--- a/crates/wast/Cargo.toml
+++ b/crates/wast/Cargo.toml
@@ -1,19 +1,20 @@
 [package]
-name = "wast"
+name = "mycelium-wast"
 version = "5.0.1"
 authors = ["Alex Crichton <alex@alexcrichton.com>"]
 edition = "2018"
 license = "Apache-2.0 WITH LLVM-exception"
 readme = "README.md"
-repository = "https://github.com/bytecodealliance/wat/tree/master/crates/wast"
-homepage = "https://github.com/bytecodealliance/wat/tree/master/crates/wast"
-documentation = "https://docs.rs/wast"
+repository = "https://github.com/hawkw/mycelium-wat/tree/master/crates/wast"
+homepage = "https://github.com/hawkw/mycelium-wat/tree/master/crates/wast"
+documentation = "https://docs.rs/mycelium-wast"
 description = """
 Customizable Rust parsers for the WebAssembly Text formats WAT and WAST
 """
 
 [dependencies]
 leb128 = "0.2"
+mycelium-util = { git = "https://github.com/hawkw/mycelium" }
 
 [features]
 default = ['wasm-module']
diff --git a/crates/wast/src/lib.rs b/crates/wast/src/lib.rs
index e099974..440768f 100644
--- a/crates/wast/src/lib.rs
+++ b/crates/wast/src/lib.rs
@@ -46,6 +46,12 @@
 //! [`LexError`]: lexer::LexError
 
 #![deny(missing_docs)]
+#![no_std]
+
+#[cfg(test)]
+extern crate std;
+
+extern crate alloc;
 
 use std::fmt;
 use std::path::{Path, PathBuf};
@@ -60,6 +66,7 @@ pub use self::ast::*;
 
 pub mod lexer;
 pub mod parser;
+pub(crate) mod stdlib;
 
 /// A convenience error type to tie together all the detailed errors produced by
 /// this crate.
diff --git a/crates/wast/src/stdlib.rs b/crates/wast/src/stdlib.rs
new file mode 100644
index 0000000..23b2457
--- /dev/null
+++ b/crates/wast/src/stdlib.rs
@@ -0,0 +1,56 @@
+//! Re-exports either the Rust `std` library or `core` and `alloc` when `std` is
+//! disabled.
+//!
+//! `crate::stdlib::...` should be used rather than `std::` when adding code that
+//! will be available with the standard library disabled.
+//!
+//! Note that this module is called `stdlib` rather than `std`, as Rust 1.34.0
+//! does not permit redefining the name `std` (although this works on the
+//! latest stable Rust).
+
+// We pre-emptively export everything from libcore/liballoc, (even modules
+// we aren't using currently) to make adding new code easier. Therefore,
+// some of these imports will be unused.
+#![allow(unused_imports)]
+pub(crate) use alloc::{boxed, collections, rc, string, vec};
+pub(crate) use core::{
+    any, array, ascii, cell, char, clone, cmp, convert, default, f32, f64, ffi, future, hash, hint,
+    i128, i16, i8, isize, iter, marker, mem, num, ops, option, pin, ptr, result, task, time, u128,
+    u16, u32, u8, usize,
+};
+
+pub(crate) use mycelium_util::error;
+
+pub(crate) mod prelude {
+    pub(crate) use crate::stdlib::{boxed::Box, string::String, vec::Vec};
+}
+
+pub(crate) mod borrow {
+    pub(crate) use alloc::borrow::*;
+    pub(crate) use core::borrow::*;
+}
+
+pub(crate) mod path {
+    pub(crate) type Path<'a> = &'a str;
+    pub(crate) type PathBuf = crate::stdlib::string::String;
+}
+
+pub(crate) mod fmt {
+    pub(crate) use alloc::fmt::*;
+    pub(crate) use core::fmt::*;
+}
+
+pub(crate) mod slice {
+    pub(crate) use alloc::slice::*;
+    pub(crate) use core::slice::*;
+}
+
+pub(crate) mod str {
+    pub(crate) use alloc::str::*;
+    pub(crate) use core::str::*;
+}
+
+pub(crate) mod sync {
+    pub(crate) use alloc::sync::*;
+    pub(crate) use core::sync::*;
+}
